__NUXT_JSONP__('qiitaapplication/270', (function (a, b, c, d) { return { data: [{ post: { id: 270, date: '2020-08-09T18:15:21', date_gmt: '2020-08-09T09:15:21', guid: { rendered: 'http:\u002F\u002Fwordpressmyblog-env.eba-pyivcx8v.ap-northeast-1.elasticbeanstalk.com\u002F?p=270' }, modified: '2020-08-19T10:40:21', modified_gmt: '2020-08-19T01:40:21', slug: 'realm%e3%82%92%e4%bd%bf%e7%94%a8%e3%81%97%e3%81%9f%e3%81%8a%e6%b0%97%e3%81%ab%e5%85%a5%e3%82%8a%e8%a8%98%e4%ba%8b%e3%81%ae%e4%bf%9d%e5%ad%98', status: 'publish', type: 'post', link: 'https:\u002F\u002Fwww.komugirice.com\u002Fqiitaapplication\u002F270\u002F', title: { rendered: 'Realmを使用したお気に入り記事の保存' }, content: { rendered: '\n\u003Cp\u003Eお気に入り記事を登録する仕組みとして、モバイル向けDBのRealmを使用した。アプリ内の領域にデータを保存する。\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003E現在のモバイル向けDBは、Android JetpackによるとRoomが主流らしい\u003C\u002Fp\u003E\n\n\n\n\n\u003Ca rel="noopener noreferrer" href="https:\u002F\u002Fdeveloper.android.com\u002Fjetpack?hl=ja" title="Android デベロッパー  |  Android Developers" class="blogcard-wrap external-blogcard-wrap a-wrap cf" target="_blank"\u003E\u003Cdiv class="blogcard external-blogcard eb-left cf"\u003E\u003Cdiv class="blogcard-label external-blogcard-label"\u003E\u003Cspan class="fa"\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cfigure class="blogcard-thumbnail external-blogcard-thumbnail"\u003E\u003Cimg src="https:\u002F\u002Fwww.komugirice.com\u002Fwp-content\u002Fuploads\u002Fcocoon-resources\u002Fblog-card-cache\u002Ff37b2fee3109ff5f289228d7559d087b.png" alt="" class="blogcard-thumb-image external-blogcard-thumb-image" width="320" height="180" \u002F\u003E\u003C\u002Ffigure\u003E\u003Cdiv class="blogcard-content external-blogcard-content"\u003E\u003Cdiv class="blogcard-title external-blogcard-title"\u003EAndroid デベロッパー  |  Android Developers\u003C\u002Fdiv\u003E\u003Cdiv class="blogcard-snippet external-blogcard-snippet"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class="blogcard-footer external-blogcard-footer cf"\u003E\u003Cdiv class="blogcard-site external-blogcard-site"\u003E\u003Cdiv class="blogcard-favicon external-blogcard-favicon"\u003E\u003Cimg src="\u002F\u002Fwww.google.com\u002Fs2\u002Ffavicons?domain=developer.android.com" class="blogcard-favicon-image" alt="" width="16" height="16" \u002F\u003E\u003C\u002Fdiv\u003E\u003Cdiv class="blogcard-domain external-blogcard-domain"\u003Edeveloper.android.com\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fa\u003E\n\n\n\n\n\u003Cp class="caption"\u003E取得処理\u003C\u002Fp\u003E\n\n\n\n\u003Cp class="filename"\u003EFavoriteFragment.kt\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group=""\u003Eclass FavoriteFragment : Fragment() {\n・・・\n    \u002F** Realmインスタンス *\u002F\n    lateinit var mRealm: Realm\n・・・\n    private fun initialize() {\n        Realm.init(context)\n        mRealm = Realm.getDefaultInstance()\n\n\n    }\n・・・\n    fun readAll(): List&lt;ArticleRow\u003E? {\n        val results = mRealm.where(ArticleRow::class.java).equalTo("delFlg", "0")\n            .sort("updDate", Sort.DESCENDING)\n        .findAll().let { mRealm.copyFromRealm(it)}\n        return  results\n    }\n・・・\n}\u003C\u002Fpre\u003E\n\n\n\u003Cdiv class="mb20 clearfix"\u003E\u003C\u002Fdiv\u003E\n\n\n\u003Cp class="filename"\u003EArticleRow.kt\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group=""\u003Eopen class ArticleRow (\n    @PrimaryKey open var id : String = "",\n    @Required open var url : String = "",\n    @Required open var title : String = "",\n    var profileImageUrl : String = "",\n・・・\n) : RealmObject() {\n・・・\n    companion object {\n        fun findAll(): List&lt;ArticleRow\u003E =\n            Realm.getDefaultInstance().use { realm -\u003E\n                realm.where(ArticleRow::class.java)\n                    .findAll()\n                    .let { realm.copyFromRealm(it) }\n            }\n\n        fun showAll() {\n            findAll()\n                .forEach {\n                Log.d("Favorite", "$it")\n            }\n        }\n    }\n・・・\n}\u003C\u002Fpre\u003E\n\n\n\u003Cdiv class="mb20 clearfix"\u003E\u003C\u002Fdiv\u003E\n\n\n\u003Cp class="filename"\u003EWebViewActivity.kt\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group=""\u003Eclass WebViewActivity : AppCompatActivity() {\n・・・\n    \u002F** Realmインスタンス *\u002F\n    lateinit var mRealm: Realm\n    \u002F** 記事URL *\u002F\n    private val mUrl by lazy { intent.getStringExtra(KEY_URL) }\n    \u002F** 記事タイトル *\u002F\n    private val mTitle by lazy { intent.getStringExtra(KEY_TITLE) }\n    \u002F** 記事ID *\u002F\n    private val mQiitaResponseID by lazy { intent.getStringExtra(KEY_ID) }\n    \u002F** お気に入りクラス *\u002F\n    lateinit var favorite: ArticleRow\n・・・\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_web_view)\n\n        initialize()\n\n    }\n・・・\n    private fun initialize() {\n        Realm.init(this)\n        mRealm = Realm.getDefaultInstance()\n        initData()\n        initLayout()\n    }\n・・・\n    private fun initData() {\n        \u002F\u002F realmからselect\n        favorite = read(mQiitaResponseID) ?: ArticleRow()\n    }\n・・・\n    private fun initClick() {\n        \u002F\u002F お気に入りアイコン\n        icFavorite.setOnClickListener {\n            \u002F\u002F お気に入り未登録or1度登録したけど削除の場合\n            if (favorite.id.isEmpty() || favorite.delFlg == "1") {\n                \u002F\u002FrealmにinsertOrUpdate\n                insertOrUpdate("0")\n                \u002F\u002F 画像の変更\n                icFavorite.setImageResource(R.drawable.ic_favorite_red_24dp)\n            } else {\n                \u002F\u002F 削除\n                \u002F\u002F realmにUpdate\n                insertOrUpdate("1")\n                \u002F\u002F 画像の変更\n                icFavorite.setImageResource(R.drawable.ic_favorite_border_red_24dp)\n            }\n        }\n・・・\n    }\n・・・\n    override fun onDestroy() {\n        super.onDestroy()\n        mRealm.close()\n    }\n・・・\n   \u002F**\n     * insertOrUpdateメソッド\n     *\n     * @param id: String\n     * @param url: String\n     * @param title: String\n     * @param delFlg: String\n     *\n     *\u002F\n    fun insertOrUpdate(delFlg: String) {\n        mRealm.executeTransaction { realm -\u003E\n            realm.insertOrUpdate(\n                favorite.apply {\n                    if (id.isEmpty())\n                        id = mQiitaResponseID\n                    url = if (url.isEmpty()) mUrl else url\n                    title = if (title.isEmpty()) mTitle else title\n                    profileImageUrl = intent.getStringExtra(KEY_PROFILE_IMAGE_URL)\n                    userName = intent.getStringExtra(KEY_USER_NAME)\n                    createdAt = intent.getStringExtra(KEY_CREATED_AT)\n                    likesCount = intent.getStringExtra(KEY_LIKES_COUNT)\n                    commentCount = intent.getStringExtra(KEY_COMMENT_COUNT)\n                    tags = intent.getStringExtra(KEY_TAGS)\n                    updDate = Date().getDateToString()\n                    this.delFlg = delFlg\n\n                }\n            )\n        }\n    }\n\n    \u002F**\n     * readメソッド\n     *\n     * @param id: String\n     *\u002F\n    fun read(id: String): ArticleRow? {\n        return mRealm.where(ArticleRow::class.java).equalTo("id", id).equalTo("delFlg", "0")\n            .findFirst()\n    }\u003C\u002Fpre\u003E\n', protected: b }, excerpt: { rendered: '\u003Cp\u003Eお気に入り記事を登録する仕組みとして、モバイル向けDBのRealmを使用した。アプリ内の領域にデータを保存する。 現在のモバイル向けDBは、Android JetpackによるとRoomが主流らしい 取得処理 Favor [&hellip;]\u003C\u002Fp\u003E\n', protected: b }, author: c, featured_media: 0, comment_status: d, ping_status: d, sticky: b, template: '', format: 'standard', meta: [], categories: [7], tags: [18], _links: { self: [{ href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F270' }], collection: [{ href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts' }], about: [{ href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost' }], author: [{ embeddable: a, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1' }], replies: [{ embeddable: a, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=270' }], 'version-history': [{ count: c, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F270\u002Frevisions' }], 'predecessor-version': [{ id: 604, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F270\u002Frevisions\u002F604' }], 'wp:attachment': [{ href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=270' }], 'wp:term': [{ taxonomy: 'category', embeddable: a, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=270' }, { taxonomy: 'post_tag', embeddable: a, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=270' }], curies: [{ name: 'wp', href: 'https:\u002F\u002Fapi.w.org\u002F{rel}', templated: a }] } } }], fetch: [], mutations: void 0 } }(true, false, 1, 'closed')))
