__NUXT_JSONP__('qiitaapplication/344', (function (a, b, c) { return { data: [{ post: { id: 344, date: '2020-08-10T10:49:22', date_gmt: '2020-08-10T01:49:22', guid: { rendered: 'http:\u002F\u002Fwordpressmyblog-env.eba-pyivcx8v.ap-northeast-1.elasticbeanstalk.com\u002F?p=344' }, modified: '2020-08-19T10:40:21', modified_gmt: '2020-08-19T01:40:21', slug: 'mvvm%e3%81%a8livedata%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6', status: 'publish', type: 'post', link: 'https:\u002F\u002Fwww.komugirice.com\u002Fqiitaapplication\u002F344\u002F', title: { rendered: 'MVVMとDataBindingの流れについて' }, content: { rendered: '\n\u003Cp\u003EMVVMとは(Model)-(View)-(ViewModel)のアーキテクチャーパターンである\u003C\u002Fp\u003E\n\n\n\n\u003Cbr\u003E\n\n\n\n\u003Cp\u003EAndroidアプリはWebアプリと違ってクライアント：サーバ構成ではない。クライアントサイドにあたる端末に直接インストールされる。\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003EActivity, Fragmentという呼び方は、その理由からAndroid専用の概念として呼んでいるのではないだろうか\u003C\u002Fp\u003E\n\n\n\u003Cp\u003EそしてActivity, Fragmentは&#8221;View&#8221;の役割である「UIの表示・更新」を担う\u003C\u002Fp\u003E\n\u003Cp\u003EViewModelが「UIを表示するための必要なデータ取得・更新処理」を担う\u003C\u002Fp\u003E\n\n\n\u003Cp\u003E\u003Cdiv class="mb40 clearfix"\u003E\u003C\u002Fdiv\u003E\n\u003Cp class="caption"\u003EQiitaApplicationでは下記の構成でMVVMを実装している\u003C\u002Fp\u003E\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003EModel：ArticleRow\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003EView：AriticleFragment, fragment_article.xml\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003EViewModel：ArticleViewModel\u003C\u002Fp\u003E\n\n\n\n\u003Cdiv class="mb40 clearfix"\u003E\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp class="caption"\u003E処理の流れはこのような形となる\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003E\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003E・アプリを起動して\u003Cstrong\u003EAriticleFragment(View)\u003C\u002Fstrong\u003Eを表示 →\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003E・\u003Cstrong\u003EAriticleFragment(View)\u003C\u002Fstrong\u003Eのアクションで\u003Cstrong\u003EArticleViewModel\u003C\u002Fstrong\u003Eを呼び出す → \u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003E・\u003Cstrong\u003EArticleViewModel\u003C\u002Fstrong\u003EがAPI呼び出しで\u003Cstrong\u003EArticleRow(Model)\u003C\u002Fstrong\u003Eにデータを設定 → \u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003E・LiveDataを使用して\u003Cstrong\u003EAriticleFragment(View)\u003C\u002Fstrong\u003EのArticleListView.refresh()を呼び出す → \u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003E・ArticleListViewのonBindViewHolder()で\u003Cstrong\u003EArticleRow(Model)\u003C\u002Fstrong\u003Eを\u003Cstrong\u003Erow.xml(View)に\u003C\u002Fstrong\u003Eデータバインディングを行う\u003C\u002Fp\u003E\n\n\n\n\u003Cdiv class="mb40 clearfix"\u003E\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E一つずつ見てみよう\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\n\n\n\u003Cp\u003E・アプリを起動してAriticleFragment(View)を表示\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\n\n\n\u003Cp\u003E・AriticleFragment(View)のアクションでArticleViewModelを呼び出す\u003C\u002Fp\u003E\n\n\n\n\u003Cdiv class="indent"\u003E\n\n\n\n\u003Cp class="filename"\u003EAriticleFragment\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="3,11,19,24,29" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group=""\u003Eclass ArticleFragment : Fragment() {\n・・・\n    private lateinit var viewModel: ArticleViewModel\n・・・\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n・・・\n        \u002F\u002F initViewModel\n        viewModel = ViewModelProviders.of(this).get(ArticleViewModel::class.java).apply {\n・・・\n        }\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        initialize()\n    }\n\n    private fun initialize() {\n        initLayout()\n        initData()\n    }\n\n    private fun initData() {\n        \u002F\u002F QiitaAPI実行\n        viewModel.initData(false)\n    }\n\n\u003C\u002Fpre\u003E\n\n\n\n\u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\n\n\n\u003Cp\u003E・ArticleViewModelがAPI呼び出しでArticleRow(Model)にデータを設定\u003C\u002Fp\u003E\n\n\n\n\u003Cdiv class="indent"\u003E\n\n\n\n\u003Cp class="filename"\u003EArticleViewModel.kt\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="24,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53" data-enlighter-linenumbers="" data-enlighter-lineoffset="23" data-enlighter-title="" data-enlighter-group=""\u003E    fun initData(isFavorite: Boolean) {\n        updateData(1, isFavorite)\n    }\n\n    fun initSearch(type: Int, query: String) {\n        search(type, 1, query)\n    }\n\n    \u002F**\n     * updateData\n     *\n     * @param page 検索するページ番号\n     * @param isFavorite　お気に入りか\n     * @param isAdd true:追加 false:クリア\n     *\n     *\u002F\n    fun updateData(page: Int, isFavorite: Boolean, isAdd: Boolean = false) {\n        QiitaApi.itemsIF.getItem(page)\n            .observeOn(AndroidSchedulers.mainThread())\n            .subscribeOn(Schedulers.io())\n            .subscribe({\n                var articleRowList : MutableList&lt;ArticleRow\u003E  = mutableListOf()\n                it.forEach({\n                        resp -\u003E\n                    val row =\n                        ArticleRow()\n                    row.convertFromQiitaResponse(resp)\n                    articleRowList.add(row)\n                })\n                \u002F\u002F 取得データ反映\n                setItems(articleRowList, isFavorite, isAdd)\n\n            }, {\n                currentPage = page\n                isAddPrev = isAdd\n\n                \u002F\u002Fitems.postValue(listOf())\n                isException.postValue(it)\n\n            })\n\n    }\u003C\u002Fpre\u003E\n\n\n\n\u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\n\n\n\u003Cp\u003E・LiveDataを使用してAriticleFragment(View)のArticleListViewに反映 \u003C\u002Fp\u003E\n\n\n\n\u003Cdiv class="indent"\u003E\n\n\n\n\u003Cp class="filename"\u003EArticleViewModel.kt\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003ELiveDataを定義\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="16" data-enlighter-title="" data-enlighter-group=""\u003E    val items = MutableLiveData&lt;List&lt;ArticleAdapter.QiitaData\u003E\u003E()\u003C\u002Fpre\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="74,85" data-enlighter-linenumbers="" data-enlighter-lineoffset="66" data-enlighter-title="" data-enlighter-group=""\u003E   \u002F**\n     * setItems\n     *\n     * @param articleRowList\n     * @param isFavorite\n     * @param isAdd\n     *\n     *\u002F\n    fun setItems(articleRowList : MutableList&lt;ArticleRow\u003E, isFavorite: Boolean, isAdd: Boolean = false) {\n\n        \u002F\u002F 引数：articleRowList → ArticleAdapter.QiitaDataにコンバート\n        val qiitaList : MutableList&lt;ArticleAdapter.QiitaData\u003E = mutableListOf()\n        articleRowList.forEach({ row -\u003E qiitaList.add(ArticleAdapter.QiitaData(row, isFavorite))})\n\n        \u002F\u002F 引数：isAddによってデータ追加orクリア\n        val tempList = mutableListOf&lt;ArticleAdapter.QiitaData\u003E()\n        if (isAdd)\n            tempList.addAll(items.value ?: listOf())\n        tempList.addAll(qiitaList)\n        items.postValue(tempList)\n    }\u003C\u002Fpre\u003E\n\n\n\n\u003Cp\u003ELiveData.postValue()で値を更新するとLiveDataの監視処理が検知する\u003C\u002Fp\u003E\n\n\n\n\u003Cbr\u003E\n\u003Cp class="filename"\u003EArticleFragment.kt\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003Eitems.observe(this@ArticleFragment, Observer {〜})　がLiveDataの監視処理\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="59,62" data-enlighter-linenumbers="" data-enlighter-lineoffset="57" data-enlighter-title="" data-enlighter-group=""\u003E        viewModel = ViewModelProviders.of(this).get(ArticleViewModel::class.java).apply {\n            \u002F\u002F QiitaApiが実行されて正常終了した\n            items.observe(this@ArticleFragment, Observer {\n                binding.apply {\n                    \u002F\u002F items = it\n                    customAdapter.refresh(it)\n                    swipeRefreshLayout.isRefreshing = false\n                }\n            })\n            \u002F\u002F QiitaAPIでExceptionが発生した\n            isException.observe(this@ArticleFragment, Observer {\n                when(it) {\n                    is UnknownHostException -\u003E {\n                        showErrorDialog(\n                            R.string.title_network_error,\n                            R.string.message_network_error)\n                    }\n                    is HttpException -\u003E {\n                        showErrorDialog(\n                            R.string.title_api_error,\n                            R.string.message_api_error)\n                    }\n                    else -\u003E Log.e("QiitaAPI", "UnExpected Error")\n                }\n                binding.swipeRefreshLayout.isRefreshing = false\n            })\n        }\u003C\u002Fpre\u003E\n\n\n\n\u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\n\n\n\u003Cp\u003E・ArticleListViewのonBindViewHolder()でrow.xmlにArticleRow(Model)をデータバインディングを行う\u003C\u002Fp\u003E\n\n\n\n\u003Cdiv class="indent"\u003E\n\n\n\n\u003Cp class="filename"\u003EArticleAdapter.kt\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="26" data-enlighter-title="" data-enlighter-group=""\u003E    private val items = mutableListOf&lt;QiitaData\u003E()\u003C\u002Fpre\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="205" data-enlighter-linenumbers="" data-enlighter-lineoffset="200" data-enlighter-title="" data-enlighter-group=""\u003E    fun refresh(qiitaList: List&lt;QiitaData\u003E) {\n        \u002F\u002F リフレッシュ実行フラグON\n        hasCompletedFirstRefresh = true\n        items.apply {\n            clear()\n            addAll(qiitaList)\n        }\n\n        notifyDataSetChanged()\n    }\u003C\u002Fpre\u003E\n\n\n\n\u003Cbr\u003E\n\n\n\n\u003Cp\u003EDataBindingについて\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003Erow.xmlを&lt;layout&gt;〜&lt;\u002Flayout&gt;で囲むと、RowBindingというクラスが生成される\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003ERowBindingでは、row.xmlに定義している&lt;data&gt;〜&lt;\u002Fdata&gt;にアクセスできるようになる。\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="230" data-enlighter-title="" data-enlighter-group=""\u003E    class RowViewHolder(val binding: RowBinding): RecyclerView.ViewHolder(binding.root)\u003C\u002Fpre\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="kotlin" data-enlighter-theme="" data-enlighter-highlight="130, 135, 148" data-enlighter-linenumbers="" data-enlighter-lineoffset="121" data-enlighter-title="" data-enlighter-group=""\u003E    private fun onBindViewHolder(holder: RowViewHolder, position: Int) {\n        val data = items[position]\n\n        \u002F\u002F プロフィール画像\n        \u002F\u002F タイトル\n        \u002F\u002F いいね数\n        \u002F\u002F コメント数\n        \u002F\u002F 登録日（お気に入り画面で使用）\n        \u002F\u002Fholder.binding.bindProfileImage = Picasso.get().load(data.row.profileImageUrl).get() → utilに移行\n        holder.binding.articleRow = data.row\n\n        \u002F\u002F ユーザ名 + " が" + 登録日 + " に投稿しました"\n        var userInfo = if(data.row.userName.isEmpty()) "Non-Name" else data.row.userName.trim()\n        userInfo += context?.getString( R.string.label_user_name ) + data.row.createdAt + context?.getString( R.string.label_created_at )\n        holder.binding.bindUserInfo = userInfo\n\n        \u002F\u002F タググループ 5個まで\n        var tagList: MutableList&lt;Tag\u003E = mutableListOf()\n        val tagStrList = data.row.tags.split(",").withIndex().map { if(it.index &lt;= 4) it.value else "" }.filterNot { it.isEmpty() }\n        tagStrList.forEach {\n            \u002F\u002F 色：黒、テキストサイズ：10、背景画像：ic_label_gray_24dp\n            val tag: Tag = Tag(it)\n            tag.tagTextColor = Color.BLACK\n            tag.tagTextSize = 10.0f\n            tag.background = context?.getDrawable(R.drawable.ic_label_gray_24dp)\n            tagList.add(tag)\n        }\n        holder.binding.tagGroup.addTags(tagList)\n\n        \u002F\u002F 登録日の表示切り替え\n        holder.binding.updDateLabel.toggle(data.isFavorite)\n        holder.binding.updDate.toggle(data.isFavorite)\n        \u002F\u002Fholder.rootView.setBackgroundColor(ContextCompat.getColor(context, if (position % 2 == 0) R.color.light_blue else R.color.light_yellow))\n    }\u003C\u002Fpre\u003E\n\n\n\n\u003Cp class="filename"\u003Erow.xml\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="6,7,23,27,31,35,39,43" data-enlighter-linenumbers="false" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group=""\u003E&lt;?xml version="1.0" encoding="utf-8"?\u003E\n&lt;layout\u003E\n\n    &lt;data\u003E\n        &lt;variable\n            name="articleRow"\n            type="com.komugirice.qiitaapplication.dataclass.ArticleRow" \u002F\u003E\n        &lt;variable\n            name="bindUserInfo"\n            type="String" \u002F\u003E\n    &lt;\u002Fdata\u003E\n&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http:\u002F\u002Fschemas.android.com\u002Fapk\u002Fres\u002Fandroid"\n    xmlns:app="http:\u002F\u002Fschemas.android.com\u002Fapk\u002Fres-auto"\n    xmlns:tools="http:\u002F\u002Fschemas.android.com\u002Ftools"\n    android:id="@+id\u002FConstraintLayout"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:orientation="horizontal"\u003E\n\n・・・\n    &lt;ImageView\n        android:id="@+id\u002FprofileImage"\n        app:imageUrl="@{articleRow.profileImageUrl}"\n・・・\n        &lt;TextView\n            android:id="@+id\u002FuserInfo"\n            android:text="@{bindUserInfo}"\n・・・\n        &lt;TextView\n            android:id="@+id\u002FarticleTitle"\n            android:text="@{articleRow.title}"\n・・・\n        &lt;TextView\n            android:id="@+id\u002FlikesCount"\n            android:text="@{articleRow.likesCount}"\n・・・\n        &lt;TextView\n            android:id="@+id\u002FcommentCount"\n            android:text="@{articleRow.commentCount}"\n・・・\n        &lt;TextView\n            android:id="@+id\u002FupdDate"\n            android:text="@{articleRow.updDate}"\n・・・\n\n&lt;\u002Fandroidx.constraintlayout.widget.ConstraintLayout\u003E\n&lt;\u002Flayout\u003E\n\u003C\u002Fpre\u003E\n\n\n\n\u003Cp\u003Eapp:imageUrl=&#8221;@{articleRow.profileImageUrl}&#8221;のように、\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003E&lt;data&gt;〜&lt;\u002Fdata&gt;に定義した変数を、@{〜}で囲むことでViewのパラメータに直接代入できる。\u003C\u002Fp\u003E\n\n\n\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003C\u002Fp\u003E\n', protected: b }, excerpt: { rendered: '\u003Cp\u003EMVVMとは(Model)-(View)-(ViewModel)のアーキテクチャーパターンである AndroidアプリはWebアプリと違ってクライアント：サーバ構成ではない。クライアントサイドにあたる端末に直接インストー [&hellip;]\u003C\u002Fp\u003E\n', protected: b }, author: 1, featured_media: 0, comment_status: c, ping_status: c, sticky: b, template: '', format: 'standard', meta: [], categories: [7], tags: [12, 23, 24, 10], _links: { self: [{ href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F344' }], collection: [{ href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts' }], about: [{ href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost' }], author: [{ embeddable: a, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1' }], replies: [{ embeddable: a, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=344' }], 'version-history': [{ count: 89, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F344\u002Frevisions' }], 'predecessor-version': [{ id: 592, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F344\u002Frevisions\u002F592' }], 'wp:attachment': [{ href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=344' }], 'wp:term': [{ taxonomy: 'category', embeddable: a, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=344' }, { taxonomy: 'post_tag', embeddable: a, href: 'https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=344' }], curies: [{ name: 'wp', href: 'https:\u002F\u002Fapi.w.org\u002F{rel}', templated: a }] } } }], fetch: [], mutations: void 0 } }(true, false, 'closed')))
