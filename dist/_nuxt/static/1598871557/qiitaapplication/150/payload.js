__NUXT_JSONP__("qiitaapplication/150", (function(a,b,c,d){return {data:[{post:{id:150,date:"2020-08-09T08:23:55",date_gmt:"2020-08-08T23:23:55",guid:{rendered:"http:\u002F\u002Fwordpressmyblog-env.eba-pyivcx8v.ap-northeast-1.elasticbeanstalk.com\u002F?p=150"},modified:"2020-08-19T10:40:21",modified_gmt:"2020-08-19T01:40:21",slug:"recyclerview",status:"publish",type:"post",link:"https:\u002F\u002Fwww.komugirice.com\u002Fqiitaapplication\u002F150\u002F",title:{rendered:"RecyclerViewについて"},content:{rendered:"\n\u003Cp\u003ElayoutフォルダにQiita記事レイアウト用のViewを作成し、RecyclerViewがそれをリスト表示する\u003C\u002Fp\u003E\n\n\n\n\u003Cp class=\"filename\"\u003Efragment_article.xml\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"xml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"false\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003E        &lt;androidx.recyclerview.widget.RecyclerView\n            android:id=\"@+id\u002FarticleListView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:scrollbars=\"vertical\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintHorizontal_bias=\"0.0\"\n            app:layout_constraintTop_toBottomOf=\"@+id\u002FheaderView\" \u002F\u003E\u003C\u002Fpre\u003E\n\n\n\n\u003Cp class=\"filename\"\u003EArticleFragment\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003ERecyclerViewの内部処理はadapterが行う。ここではArticleAdapterという専用のAdapterを作成している\u003C\u002Fp\u003E\n\n\n\n\u003Cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"kotlin\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"35\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003E    private val customAdapter by lazy {\n        ArticleAdapter(\n            context,\n            false\n        )\n    }\u003C\u002Fpre\u003E\n\n\n\n\u003Cpre class=\"EnlighterJSRAW\" data-enlighter-language=\"kotlin\" data-enlighter-theme=\"\" data-enlighter-highlight=\"136\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"128\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003E    private fun initRecyclerView() {\n        \u002F\u002F RecyclerViewを取得。\n        articleListView.apply {\n            \u002F\u002F LinearLayoutManagerオブジェクトを生成。\n            val layout = LinearLayoutManager(context)\n            \u002F\u002F RecyclerViewにレイアウトマネージャとしてLinearLayoutManagerを設定。\n            layoutManager = layout\n            \u002F\u002F RecyclerViewにアダプタオブジェクトを設定。\n            adapter = customAdapter\n            \u002F\u002F コンテンツの大きさが変わらないとき、trueを設定するとパフォーマンスが向上する\n            setHasFixedSize(true)\n\n            \u002F\u002F EndlessScrollListenerのインスタンス化\n            mEndlessScrollListener = object:\n                EndlessScrollListener(articleListView.layoutManager as LinearLayoutManager) {\n                override fun onLoadMore(current_page: Int) {\n                    swipeRefreshLayout.isRefreshing = true\n                    \u002F\u002F API実行\n                    viewModel.updateData(current_page, false, true)\n                }\n            }\n            \u002F\u002F RecyclerViewスクロール対応\n            articleListView.addOnScrollListener(mEndlessScrollListener)\n        }\n    }\u003C\u002Fpre\u003E\n\n\n\n\u003Cp\u003E※本来、binding.articleListViewとするべきだが、手違いでDataBindingを使用しないarticleListViewで行っている。特に不具合はないのでこのままにしている\u003C\u002Fp\u003E\n\n\n\n\u003Cdiv class=\"mb20 clearfix\"\u003E\u003C\u002Fdiv\u003E\n\u003Cp class=\"filename\"\u003EArticleAdapter\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003EArticleAdapterに実装している一般的なメソッドとクラスを記載する\u003C\u002Fp\u003E\n\n\n\n\u003Cp\u003E内部処理の詳細は別の記事にて\u003C\u002Fp\u003E\n\n\n\n\u003Cdiv class=\"mb20 clearfix\"\u003E\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003E\u003Cstrong\u003Eクラス変数\u003C\u002Fstrong\u003E\u003Cbr\u003Eprivate val items = mutableListOf&lt;QiitaData&gt;()\u003Cbr\u003Eprivate var hasCompletedFirstRefresh = false\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003Eメソッド\u003C\u002Fstrong\u003E\u003Cbr\u003Eoverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder\u003Cbr\u003Eoverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int)\u003Cbr\u003Eprivate fun onBindViewHolder(holder: RowViewHolder, position: Int) \u003Cbr\u003Eprivate fun onBindEmptyViewHolder(holder: EmptyViewHolder, position: Int) \u003Cbr\u003Eoverride fun getItemCount(): Int\u003Cbr\u003Eoverride fun getItemViewType(position: Int): Int\u003Cbr\u003Efun refresh(qiitaList: List&lt;QiitaData&gt;)\u003Cbr\u003Efun clear()\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003Eインナークラス\u003C\u002Fstrong\u003E\u003Cbr\u003Eclass RowViewHolder(val binding: RowBinding): RecyclerView.ViewHolder(binding.root)\u003Cbr\u003Eclass EmptyViewHolder(view: View) : RecyclerView.ViewHolder(view)\u003Cbr\u003Eclass QiitaData\u003C\u002Fp\u003E",protected:b},excerpt:{rendered:"\u003Cp\u003ElayoutフォルダにQiita記事レイアウト用のViewを作成し、RecyclerViewがそれをリスト表示する fragment_article.xml ArticleFragment RecyclerViewの内部 [&hellip;]\u003C\u002Fp\u003E\n",protected:b},author:c,featured_media:0,comment_status:d,ping_status:d,sticky:b,template:"",format:"standard",meta:[],categories:[7],tags:[11],_links:{self:[{href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F150"}],collection:[{href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts"}],about:[{href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Ftypes\u002Fpost"}],author:[{embeddable:a,href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fusers\u002F1"}],replies:[{embeddable:a,href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fcomments?post=150"}],"version-history":[{count:c,href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F150\u002Frevisions"}],"predecessor-version":[{id:609,href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fposts\u002F150\u002Frevisions\u002F609"}],"wp:attachment":[{href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fmedia?parent=150"}],"wp:term":[{taxonomy:"category",embeddable:a,href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Fcategories?post=150"},{taxonomy:"post_tag",embeddable:a,href:"https:\u002F\u002Fwww.komugirice.com\u002Fwp-json\u002Fwp\u002Fv2\u002Ftags?post=150"}],curies:[{name:"wp",href:"https:\u002F\u002Fapi.w.org\u002F{rel}",templated:a}]}}}],fetch:[],mutations:void 0}}(true,false,1,"closed")));